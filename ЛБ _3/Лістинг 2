def swap(arr, i, j): 

    """Міняє місцями два елементи в масиві.""" 

    arr[i], arr[j] = arr[j], arr[i] 

  

  

def sink(arr, i, n): 

    """Процедура 'занурення' елемента вниз по купі.""" 

    k = i 

    while True: 

        j = 2 * k + 1  # Індекс лівого дочірнього елемента 

        if j >= n: 

            break 

  

        # Знаходимо індекс найбільшого дочірнього елемента 

        if j + 1 < n and arr[j + 1] > arr[j]: 

            print(f"Порівнюємо {arr[j]} (лівий) та {arr[j + 1]} (правий). Обираємо {arr[j + 1]}") 

            j += 1 

  

        # Якщо поточний елемент більший або дорівнює найбільшому дочірньому 

        if arr[k] >= arr[j]: 

            print(f"{arr[k]} (батько) >= {arr[j]} (найбільший дочірній). Елемент на місці.") 

            break 

  

        # Міняємо місцями та продовжуємо занурення 

        print(f"Міняємо місцями {arr[k]} (батько) ↔ {arr[j]} (дочірній)") 

        swap(arr, k, j) 

        print(f"Масив після обміну: {arr}") 

        k = j 

  

  

def heapsort(arr): 

    """Алгоритм пірамідального сортування з трасуванням.""" 

    n = len(arr) 

    print(f"Початковий масив: {arr}\n") 

  

    # Фаза 1: Побудова максимальної купи 

    print("--- Фаза 1: Побудова максимальної купи ---") 

    for i in range(n // 2 - 1, -1, -1): 

        print(f"\nПочинаємо 'занурювати' елемент: {arr[i]} з індексу {i}") 

        sink(arr, i, n) 

    print(f"\nМасив після побудови купи: {arr}\n") 

  

    # Фаза 2: Сортування 

    print("--- Фаза 2: Сортування ---") 

    for i in range(n - 1, 0, -1): 

        print(f"\nМіняємо місцями корінь ({arr[0]}) та останній елемент ({arr[i]})") 

        swap(arr, 0, i) 

        n -= 1 

        print(f"Розмір купи зменшився до {n}. Відновлюємо властивості купи.") 

        sink(arr, 0, n) 

        print(f"Масив на поточному кроці: {arr}") 

  

    return arr 

  

  

# --- Приклад виконання для варіанта 6 --- 

A = [58, 5, 50, 99, 61, 32, 27, 45, 75] 

sorted_A = heapsort(A) 

print(f"\nВідсортований масив: {sorted_A}") 

 
